/**
 * Ï†ÄÏû• ÏãúÏä§ÌÖú
 * Í≤åÏûÑ ÏÉÅÌÉúÎ•º Ï†ÄÏû•ÌïòÍ≥† Î∂àÎü¨Ïò§Îäî Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
 */
class SaveSystem {
    constructor() {
        this.saveState = {
            autoSaveEnabled: true,
            saveCount: 0,
            lastSaveTime: null
        };
        
        this.eventListeners = new Map();
        
        console.log('‚úÖ Ï†ÄÏû• ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }
    
    /**
     * Í≤åÏûÑ Ï†ÄÏû•
     */
    async saveGame(saveData, slotName = 'auto') {
        try {
            const saveKey = `cakeDelivery_save_${slotName}`;
            const saveInfo = {
                saveData: saveData,
                timestamp: Date.now(),
                version: '2.0.0'
            };
            
            localStorage.setItem(saveKey, JSON.stringify(saveInfo));
            
            this.saveState.saveCount++;
            this.saveState.lastSaveTime = Date.now();
            
            // Ï†ÄÏû• Ïù¥Î≤§Ìä∏ Î∞úÏÉù
            this.dispatchEvent('onSave', { saveData, slotName });
            
            console.log(`üíæ Í≤åÏûÑ Ï†ÄÏû• ÏôÑÎ£å: ${slotName}`);
            return true;
            
        } catch (error) {
            console.error('Í≤åÏûÑ Ï†ÄÏû• Ïã§Ìå®:', error);
            this.dispatchEvent('onError', { type: 'save', error });
            return false;
        }
    }
    
    /**
     * Í≤åÏûÑ Î∂àÎü¨Ïò§Í∏∞
     */
    async loadGame(slotName = 'auto') {
        try {
            const saveKey = `cakeDelivery_save_${slotName}`;
            const saveInfo = localStorage.getItem(saveKey);
            
            if (!saveInfo) {
                console.warn(`Ï†ÄÏû• Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: ${slotName}`);
                return null;
            }
            
            const parsedSave = JSON.parse(saveInfo);
            
            // Î°úÎìú Ïù¥Î≤§Ìä∏ Î∞úÏÉù
            this.dispatchEvent('onLoad', parsedSave);
            
            console.log(`üìÇ Í≤åÏûÑ Î∂àÎü¨Ïò§Í∏∞ ÏôÑÎ£å: ${slotName}`);
            return parsedSave.saveData;
            
        } catch (error) {
            console.error('Í≤åÏûÑ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', error);
            this.dispatchEvent('onError', { type: 'load', error });
            return null;
        }
    }
    
    /**
     * Ï†ÄÏû• Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
     */
    collectSaveData() {
        return {
            timestamp: Date.now(),
            gameState: {},
            playerState: {},
            levelState: {},
            settings: {}
        };
    }
    
    /**
     * Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
     */
    addEventListener(eventType, callback) {
        if (!this.eventListeners.has(eventType)) {
            this.eventListeners.set(eventType, []);
        }
        this.eventListeners.get(eventType).push(callback);
    }
    
    /**
     * Ïù¥Î≤§Ìä∏ Î∞úÏÉù
     */
    dispatchEvent(eventType, data) {
        const listeners = this.eventListeners.get(eventType);
        if (listeners) {
            listeners.forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error(`Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ïò§Î•ò (${eventType}):`, error);
                }
            });
        }
    }
}